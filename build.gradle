plugins {
    id 'idea'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'org.ajoberstar.grgit' version '2.0.1'
}

import org.ajoberstar.grgit.Grgit

apply from: 'versioning.gradle'

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = applicationGroupId
project.version = getVersionCode()

configurations {
    all {
        resolutionStrategy {
            // Uncomment to see if there are dependency issues
            // failOnVersionConflict()

            // Any dependencies with .+ or  build.latest will always be checked for latest
            cacheDynamicVersionsFor 0, 'seconds'
        }
    }
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

dependencies {

    testCompile 'junit:junit:4.12'

}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.2'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

ext {
    startTime = new Date().format("yyy-MM-dd'T'HH:mm:ssZ")

    // init local mavenUser/pwd

    def gitRepo = Grgit.open(dir: '.')
    gitHash = gitRepo.head().id
    gitBranch = gitRepo.branch.current.name
    gitRepo.close()

    currentJvm = org.gradle.internal.jvm.Jvm.current()
}

jar {
    baseName = project.name
    manifest {
        attributes(
                "Manifest-Version": "1.0",
                "Vendor": project.implementationVendor,
                "Created-By": project.currentJvm,
                "Implementation-Title": project.applicationTitle,
                "Implementation-Version": project.version,
                "Implementation-Vendor": project.implementationVendor,
                "Specification-Title": project.applicationTitle,
                "Specification-Version": project.version,
                "specification-Vendor": project.specVendor,
                "Build-Hash": project.gitHash,
                "Build-Branch": project.gitBranch,
                "Build-Time": project.startTime,
                "Class-Path": configurations.runtime.collect { it.getName() }.join(' ')
        )
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    baseName = project.name
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    baseName = project.name
    from javadoc.destinationDir
}

task testsJar(type: Jar, dependsOn: classes ) {
    classifier = 'tests'
    baseName = project.name
    from sourceSets.test.output
}

publishing {
    publications {
        json4j(MavenPublication) {
            version project.version
            artifact jar
            artifact sourceJar { classifier 'sources' }
            artifact javadocJar { classifier 'javadoc' }
            artifact testsJar { classifier 'tests' }
            pom.withXml {
                asNode().children().last() + {
                    resolveStrategy = Closure.DELEGATE_FIRST
                    name project.applicationTitle
                    description project.applicationDescription
                    url project.url
                    scm {
                        url project.url
                        connection project.scmUrl
                        developerConnection project.scmUrl
                    }
                    licenses {
                        license {
                            name project.licenseName
                            url project.licenseUrl
                            distribution 'repo'
                        }
                    }
                }
            }
        }
    }
}
test {
    doFirst {
        println('RunningTests on ' + maxParallelForks + ' Cores')
    }

    maxParallelForks Runtime.runtime.availableProcessors()

    jvmArgs '-da', '-Xmx4g'

    include 'org/apache/wink/**/*Test*.class'

    testLogging {
        events 'passed', 'skipped', 'failed'
    }
}
